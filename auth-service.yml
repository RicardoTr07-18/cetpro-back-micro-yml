spring:
  application:
    name: auth-service

  main:
    lazy-initialization: true        # ⚡ Carga los beans solo cuando se usan
    banner-mode: off                 # Desactiva el banner de Spring Boot

  datasource:
    url: jdbc:postgresql://localhost:5432/Auth
    username: postgres
    password: 1234
    hikari:
      maximum-pool-size: 15
      minimum-idle: 3
      idle-timeout: 300000
      max-lifetime: 1800000
      initializationFailTimeout: 0   # ⚡ No espera si la BD tarda en responder

  jpa:
    hibernate:
      ddl-auto: none
    open-in-view: false

  cloud:
    config:
      request-read-timeout: 2000     # ⚡ Timeout corto para Config Server
      retry:
        max-attempts: 2
        initial-interval: 1000

eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka/
    registry-fetch-interval-seconds: 30
    initial-instance-info-replication-interval-seconds: 30
  instance:
    prefer-ip-address: true
    hostname: localhost
    lease-renewal-interval-seconds: 15
    lease-expiration-duration-seconds: 40

jwt:
  secret: 08725e547914eb52b7abba9bdfe7be4a2a5e6b8d9ca977d84a20816ff4f5023c
  expiration-ms: 28800000

server:
  port: 8083

management:
  metrics:
    tags:
      application: ${spring.application.name}
  endpoints:
    web:
      exposure:
        include: info, health, prometheus
  info:
    env:
      enabled: true

logging:
  level:
    root: warn                       # ⚡ Menos logs = arranque más limpio
    org.springframework: info

info:
  app:
    name: Servicio de Autenticación (auth-service)
    description: Gestiona roles, permisos, JWT, autenticación y seguridad del sistema.
    version: 1.0.0
    author: Ricardo Terrazas
    environment: desarrollo